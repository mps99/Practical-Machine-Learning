h4('Economic impact by year', align = "center"),
showOutput("economicImpact", "nvd3")
),
# Data
tabPanel(p(icon("table"), "Data"),
dataTableOutput(outputId="table"),
downloadButton('downloadData', 'Download')
)
)
)
),
tabPanel("About",
mainPanel(
includeMarkdown("include.md")
)
)
)
)
install.packages("manipulate")
install.packages("shiny")
# This is the user-interface definition of a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# http://www.rstudio.com/shiny/
#
library(shiny)
# Fix tag("div", list(...)) : could not find function "showOutâ€¦
library(rCharts)
shinyUI(
navbarPage("Storm Database Explorer",
tabPanel("Plot",
sidebarPanel(
sliderInput("range",
"Range:",
min = 1950,
max = 2011,
value = c(1993, 2011),
format="####"),
uiOutput("evtypeControls"),
actionButton(inputId = "clear_all", label = "Clear selection", icon = icon("check-square")),
actionButton(inputId = "select_all", label = "Select all", icon = icon("check-square-o"))
),
mainPanel(
tabsetPanel(
# Data by state
tabPanel(p(icon("map-marker"), "By state"),
column(3,
wellPanel(
radioButtons(
"populationCategory",
"Population impact category:",
c("Both" = "both", "Injuries" = "injuries", "Fatalities" = "fatalities"))
)
),
column(3,
wellPanel(
radioButtons(
"economicCategory",
"Economic impact category:",
c("Both" = "both", "Property damage" = "property", "Crops damage" = "crops"))
)
),
column(7,
plotOutput("populationImpactByState"),
plotOutput("economicImpactByState")
)
),
# Time series data
tabPanel(p(icon("line-chart"), "By year"),
h4('Number of events by year', align = "center"),
showOutput("eventsByYear", "nvd3"),
h4('Population impact by year', align = "center"),
showOutput("populationImpact", "nvd3"),
h4('Economic impact by year', align = "center"),
showOutput("economicImpact", "nvd3")
),
# Data
tabPanel(p(icon("table"), "Data"),
dataTableOutput(outputId="table"),
downloadButton('downloadData', 'Download')
)
)
)
),
tabPanel("About",
mainPanel(
includeMarkdown("include.md")
)
)
)
)
format="####"),
library(shiny)
library(ggplot2)
library(data.table)
library(maps)
library(rCharts)
library(reshape2)
library(markdown)
library(mapproj)
states_map <- map_data("state")
dt <- fread('data/events.agg.csv')
dt$EVTYPE <- tolower(dt$EVTYPE)
evtypes <<- sort(unique(dt$EVTYPE))
shinyServer(function(input, output) {
dt.agg <- reactive({
tmp <- merge(
data.table(STATE=sort(unique(dt$STATE))),
dt[
YEAR >= input$range[1] & YEAR <= input$range[2] & EVTYPE %in% input$evtypes,
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(STATE)],
by=c('STATE'), all=TRUE
)
tmp[is.na(tmp)] <- 0
tmp
})
dt.agg.year <- reactive({
dt[
YEAR >= input$range[1] & YEAR <= input$range[2] & EVTYPE %in% input$evtypes,
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
PROPDMG=round(sum(PROPDMG), 2),
FATALITIES=sum(FATALITIES),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(YEAR)
]
})
output$populationImpactByState <- renderPlot({
data <- dt.agg()
if(input$populationCategory == 'both') {
data$Affected <- data$INJURIES + data$FATALITIES
} else if(input$populationCategory == 'fatalities') {
data$Affected <- data$FATALITIES
} else {
data$Affected <-data$INJURIES
}
title <- paste("Population impact", input$range[1], "-", input$range[2], "(number of affected)")
p <- ggplot(data, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Affected), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw()
p <- p + labs(x = "Long", y = "Lat", title = title)
print(p)
})
output$economicImpactByState <- renderPlot({
data <- dt.agg()
if(input$economicCategory == 'both') {
data$Damages <- data$PROPDMG + data$CROPDMG
} else if(input$economicCategory == 'crops') {
data$Damages <- data$CROPDMG
} else {
data$Damages <- data$PROPDMG
}
title <- paste("Economic impact", input$range[1], "-", input$range[2], "(Million USD)")
p <- ggplot(data, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Damages), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw()
p <- p + labs(x = "Long", y = "Lat", title = title)
print(p)
})
output$evtypeControls <- renderUI({
if(1) {
checkboxGroupInput('evtypes', 'Event types', evtypes, selected=evtypes)
}
})
dataTable <- reactive({
dt.agg()[, list(
State=state.abb[match(STATE, tolower(state.name))],
Count=COUNT,
Injuries=INJURIES,
Fatalities=FATALITIES,
Property.damage=PROPDMG,
Crops.damage=CROPDMG)
]
})
output$table <- renderDataTable(
{dataTable()}, options = list(bFilter = FALSE, iDisplayLength = 50))
output$eventsByYear <- renderChart({
data <- dt.agg.year()[, list(COUNT=sum(COUNT)), by=list(YEAR)]
setnames(data, c('YEAR', 'COUNT'), c("Year", "Count"))
eventsByYear <- nPlot(
Count ~ Year,
data = data[order(data$Year)],
type = "lineChart", dom = 'eventsByYear', width = 650
)
eventsByYear$chart(margin = list(left = 100))
eventsByYear$yAxis( axisLabel = "Count", width = 80)
eventsByYear$xAxis( axisLabel = "Year", width = 70)
return(eventsByYear)
})
output$populationImpact <- renderChart({
data <- melt(
dt.agg.year()[, list(Year=YEAR, Injuries=INJURIES, Fatalities=FATALITIES)],
id='Year'
)
populationImpact <- nPlot(
value ~ Year, group = 'variable', data = data[order(-Year, variable, decreasing = T)],
type = 'stackedAreaChart', dom = 'populationImpact', width = 650
)
populationImpact$chart(margin = list(left = 100))
populationImpact$yAxis( axisLabel = "Affected", width = 80)
populationImpact$xAxis( axisLabel = "Year", width = 70)
return(populationImpact)
})
output$economicImpact <- renderChart({
data <- melt(
dt.agg.year()[, list(Year=YEAR, Propety=PROPDMG, Crops=CROPDMG)],
id='Year'
)
economicImpact <- nPlot(
value ~ Year, group = 'variable', data = data[order(-Year, variable, decreasing = T)],
type = 'stackedAreaChart', dom = 'economicImpact', width = 650
)
economicImpact$chart(margin = list(left = 100))
economicImpact$yAxis( axisLabel = "Total damage (Million USD)", width = 80)
economicImpact$xAxis( axisLabel = "Year", width = 70)
return(economicImpact)
})
output$downloadData <- downloadHandler(
filename = 'data.csv',
content = function(file) {
write.csv(dataTable(), file, row.names=FALSE)
}
)
})
min = 1950,
)
economicImpact <- nPlot(
setwd("C:/Users/502409752/Desktop/Coursera/Developing Data Products")
navbarPage("Storm Database Explorer",
tabPanel("Plot",
sidebarPanel(
sliderInput("range",
"Range:",
min = 1950,
max = 2011,
value = c(1993, 2011),
format="####"),
uiOutput("evtypeControls")
),
mainPanel(
setwd("C:/Users/502409752/Desktop/Coursera/Developing Data Products")
install.packages('devtools')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mpullela', token='E59264498D7B374B6BE56EBD4D742DF6', secret='Uu9lpuUjrdATDcQyaFQH9VD6FdmZRhZlC1r74A89')
library(shinyapps)
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products')
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products/Ui.R')
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products')
library(shinyapps)
shinyapps::deployApp('path/to/your/app') shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products/Ui.R')
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products/ServerR')
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products/ServerR')
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products')
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products/Server.R')
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products/Ui.R')
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products')
"Economic impact category:",
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products')
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products/Ui.R')
shinyapps::deployApp('C:/Users/502409752/Desktop/Coursera/Developing Data Products')
shinyapps::setAccountInfo(name='mpullela', token='E59264498D7B374B6BE56EBD4D742DF6', secret='Uu9lpuUjrdATDcQyaFQH9VD6FdmZRhZlC1r74A89')
library("manipulate", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("utils", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("rstudio", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("tools", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("lattice", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
install.packages("caret")
library("caret", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
install.packages("ggplot2")
library("caret", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
install.packages("manipulate")
library("caret", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("htmltools", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("knitr", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("manipulate", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("plyr", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("rmarkdown", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("rstudio", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("utils", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("tools", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("yaml", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
pml.testing <- read.csv("C:/Users/502409752/Desktop/Coursera/Practical Machine Learning/pml-testing.csv", header=FALSE)
View(pml.testing)
pml.testing <- read.csv("C:/Users/502409752/Desktop/Coursera/Practical Machine Learning/pml-testing.csv", header=FALSE)
View(pml.testing)
pml.training <- read.csv("C:/Users/502409752/Desktop/Coursera/Practical Machine Learning/pml-training.csv", header=FALSE)
View(pml.training)
install.packages("randomForest")
library("randomForest", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
install.packages("randomForestSRC")
install.packages("randomUniformForest")
library("randomForestSRC", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("randomForest", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
install.packages("randomForest")
install.packages("hmisc")
install.packages("Hmisc")
setwd("C:/Users/502409752/Desktop/Coursera/Practical Machine Learning")
library("randomForest", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("randomForestSRC", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
library("randomUniformForest", lib.loc="C:/Program Files/R/R-3.2.0patched/library")
install.packages("Hmisc")
As can be seen from the confusion matrix this model is very accurate.  I did experiment with PCA
and other models, but did not get as good of accuracy. Because my test data was around 99%
accurate I expected nearly all of the submitted test cases to be correct.  It turned out they
were all correct.
Prepare the submission. (using COURSERA provided code)
```{r}
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
x <- evaluation_data
x <- x[feature_set[feature_set!='classe']]
answers <- predict(rf, newdata=x)
answers
pml_write_files(answers)
```
Practical Machine Learning - Prediction Assignment Writeup
==========================================================
For this assignment I analyzed the provided data to determine what activity an individual perform.
To do this I made use of caret and randomForest, this allowed me to generate correct answers for
each of the 20 test data cases provided in this assignment.  I made use of a seed value for
consistent results.
```{r}
library(Hmisc)
library(caret)
library(randomForest)
library(foreach)
library(doParallel)
set.seed(2048)
options(warn=-1)
```
First, I loaded the data both from the provided training and test data provided by COURSERA.
Some values contained a "#DIV/0!" that I replaced with an NA value.
```{r}
training_data <- read.csv("pml-training.csv", na.strings=c("#DIV/0!") )
evaluation_data <- read.csv("pml-testing.csv", na.strings=c("#DIV/0!") )
```
I also casted all columns 8 to the end to be numeric.
```{r}
for(i in c(8:ncol(training_data)-1)) {training_data[,i] = as.numeric(as.character(training_data[,i]))}
for(i in c(8:ncol(evaluation_data)-1)) {evaluation_data[,i] = as.numeric(as.character(evaluation_data[,i]))}
```
Some columns were mostly blank.  These did not contribute well to the prediction.  I chose a feature
set that only included complete columns.  We also remove user name, timestamps and windows.
Determine and display out feature set.
```{r}
feature_set <- colnames(training_data[colSums(is.na(training_data)) == 0])[-(1:7)]
model_data <- training_data[feature_set]
feature_set
```
We now have the model data built from our feature set.
```{r}
idx <- createDataPartition(y=model_data$classe, p=0.75, list=FALSE )
training <- model_data[idx,]
testing <- model_data[-idx,]
```
We now build 5 random forests with 150 trees each. We make use of parallel processing to build this
model. I found several examples of how to perform parallel processing with random forests in R, this
provided a great speedup.
```{r}
registerDoParallel()
x <- training[-ncol(training)]
y <- training$classe
rf <- foreach(ntree=rep(150, 6), .combine=randomForest::combine, .packages='randomForest') %dopar%
{
randomForest(x, y, ntree=ntree)
}
```
Provide error reports for both training and test data.
```{r}
predictions1 <- predict(rf, newdata=training)
confusionMatrix(predictions1,training$classe)
print(predictions1)
predictions2 <- predict(rf, newdata=testing)
confusionMatrix(predictions2,testing$classe)
print(predictions2)
```
Conclusions and Test Data Submit
--------------------------------
As can be seen from the confusion matrix this model is very accurate.  I did experiment with PCA
and other models, but did not get as good of accuracy. Because my test data was around 99%
accurate I expected nearly all of the submitted test cases to be correct.  It turned out they
were all correct.
Prepare the submission. (using COURSERA provided code)
```{r}
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
x <- evaluation_data
x <- x[feature_set[feature_set!='classe']]
answers <- predict(rf, newdata=x)
answers
pml_write_files(answers)
```
Conclusions and Test Data Submit
--------------------------------
As can be seen from the confusion matrix this model is very accurate.  I did experiment with PCA
and other models, but did not get as good of accuracy. Because my test data was around 99%
accurate I expected nearly all of the submitted test cases to be correct.  It turned out they
were all correct.
Prepare the submission. (using COURSERA provided code)
```{r}
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
x <- evaluation_data
x <- x[feature_set[feature_set!='classe']]
answers <- predict(rf, newdata=x)
answers
pml_write_files(answers)
```
Conclusions and Test Data Submit
--------------------------------
As can be seen from the confusion matrix this model is very accurate.  I did experiment with PCA
and other models, but did not get as good of accuracy. Because my test data was around 99%
accurate I expected nearly all of the submitted test cases to be correct.  It turned out they
were all correct.
Prepare the submission. (using COURSERA provided code)
```{r}
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
x <- evaluation_data
x <- x[feature_set[feature_set!='classe']]
answers <- predict(rf, newdata=x)
answers
pml_write_files(answers)
```
Conclusions and Test Data Submit
--------------------------------
As can be seen from the confusion matrix this model is very accurate.  I did experiment with PCA
and other models, but did not get as good of accuracy. Because my test data was around 99%
accurate I expected nearly all of the submitted test cases to be correct.  It turned out they
were all correct.
Prepare the submission. (using COURSERA provided code)
```{r}
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
x <- evaluation_data
x <- x[feature_set[feature_set!='classe']]
answers <- predict(rf, newdata=x)
answers
pml_write_files(answers)
```
predictions1 <- predict(rf, training)
predictions1 <- predict(rf, training)
confusionMatrix(predictions1,training$classe)
predictions2 <- predict(rf, testing)
confusionMatrix(predictions2,testing$classe)
```{r}
library(data.table)## Warning: package 'data.table' was built under R version 3.0.3setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)Load the testing data into a data table.
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)Which variables in the test dataset have zero NAs? Use this tip: finding columns with all missing values in r.
Belt, arm, dumbbell, and forearm variables that do not have any missing values in the test dataset will be predictor candidates.
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
```
install.packages("data.table")
setwd("C:/Users/502409752/Desktop/Coursera/Practical Machine Learning")
install.packages("shiny")
install.packages("caret")
## of figures to be less than 5. It will make it easier for the graders if you submit a repo with a gh-pages
## Submission to Coursera
Write submission files to `predictionAssignment_files/answers`.
```{r}
pml_write_files = function(x){
n = length(x)
path <- "predictionAssignment_files/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(hat)
```
setwd("C:/Users/502409752/Desktop/Coursera/Practical Machine Learning")
